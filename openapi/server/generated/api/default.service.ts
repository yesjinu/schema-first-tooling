/**
 * OpenAPI demo
 * Simple APIs for managing posts
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { Post } from '../model/post';
import { PostsConnection } from '../model/postsConnection';
import { PostsIdPatchRequest } from '../model/postsIdPatchRequest';
import { PostsPostRequest } from '../model/postsPostRequest';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class DefaultService {

    protected basePath = 'http://localhost:3000';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();
    protected httpClient: HttpService;

    constructor(httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
        this.httpClient = configuration?.httpClient || httpClient;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Get all posts
     * 
     * @param first 
     * @param after 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [postsGetOpts.config] Override http request option.
     */
    public postsGet(first?: number, after?: string, postsGetOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<PostsConnection>>;
    public postsGet(first?: number, after?: string, postsGetOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        let queryParameters = new URLSearchParams();
        if (first !== undefined && first !== null) {
            queryParameters.append('first', <any>first);
        }
        if (after !== undefined && after !== null) {
            queryParameters.append('after', <any>after);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<PostsConnection>(`${this.basePath}/posts`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        ...postsGetOpts?.config,
                        headers: {...headers, ...postsGetOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Get a post by id
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [postsIdGetOpts.config] Override http request option.
     */
    public postsIdGet(id: number, postsIdGetOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<Post>>;
    public postsIdGet(id: number, postsIdGetOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling postsIdGet.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Post>(`${this.basePath}/posts/${encodeURIComponent(String(id))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...postsIdGetOpts?.config,
                        headers: {...headers, ...postsIdGetOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Update a post
     * 
     * @param id 
     * @param postsIdPatchRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [postsIdPatchOpts.config] Override http request option.
     */
    public postsIdPatch(id: number, postsIdPatchRequest?: PostsIdPatchRequest, postsIdPatchOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<any>>;
    public postsIdPatch(id: number, postsIdPatchRequest?: PostsIdPatchRequest, postsIdPatchOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling postsIdPatch.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<any>(`${this.basePath}/posts/${encodeURIComponent(String(id))}`,
                    postsIdPatchRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...postsIdPatchOpts?.config,
                        headers: {...headers, ...postsIdPatchOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Create a post
     * 
     * @param postsPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [postsPostOpts.config] Override http request option.
     */
    public postsPost(postsPostRequest?: PostsPostRequest, postsPostOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<Post>>;
    public postsPost(postsPostRequest?: PostsPostRequest, postsPostOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<Post>(`${this.basePath}/posts`,
                    postsPostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...postsPostOpts?.config,
                        headers: {...headers, ...postsPostOpts?.config?.headers},
                    }
                );
            })
        );
    }
}
