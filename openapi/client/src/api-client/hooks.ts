/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * OpenAPI demo
 * Simple APIs for managing posts
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import useSwr from 'swr';
import type {
  Key,
  SWRConfiguration
} from 'swr';

import useSWRMutation from 'swr/mutation';
import type {
  SWRMutationConfiguration
} from 'swr/mutation';

import type {
  BadRequestResponse,
  GetPostsParams,
  NotFoundResponse,
  PatchPostsIdBody,
  Post,
  PostPostsBody,
  PostsConnection
} from './model';

/**
 * @summary Create a post
 */
export const postPosts = (
    postPostsBody: PostPostsBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Post>> => {
    return axios.post(
      `/posts`,
      postPostsBody,options
    );
  }



export const getPostPostsMutationFetcher = ( options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: PostPostsBody }): Promise<AxiosResponse<Post>> => {
    return postPosts(arg, options);
  }
}
export const getPostPostsMutationKey = () => [`/posts`] as const;

export type PostPostsMutationResult = NonNullable<Awaited<ReturnType<typeof postPosts>>>
export type PostPostsMutationError = AxiosError<unknown>

/**
 * @summary Create a post
 */
export const usePostPosts = <TError = AxiosError<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postPosts>>, TError, Key, PostPostsBody, Awaited<ReturnType<typeof postPosts>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostPostsMutationKey();
  const swrFn = getPostPostsMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Get all posts
 */
export const getPosts = (
    params?: GetPostsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostsConnection>> => {
    return axios.get(
      `/posts`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetPostsKey = (params?: GetPostsParams,) => [`/posts`, ...(params ? [params]: [])] as const;

export type GetPostsQueryResult = NonNullable<Awaited<ReturnType<typeof getPosts>>>
export type GetPostsQueryError = AxiosError<unknown>

/**
 * @summary Get all posts
 */
export const useGetPosts = <TError = AxiosError<unknown>>(
  params?: GetPostsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getPosts>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetPostsKey(params) : null);
  const swrFn = () => getPosts(params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Get a post by id
 */
export const getPostsId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Post>> => {
    return axios.get(
      `/posts/${id}`,options
    );
  }



export const getGetPostsIdKey = (id: number,) => [`/posts/${id}`] as const;

export type GetPostsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPostsId>>>
export type GetPostsIdQueryError = AxiosError<BadRequestResponse | NotFoundResponse>

/**
 * @summary Get a post by id
 */
export const useGetPostsId = <TError = AxiosError<BadRequestResponse | NotFoundResponse>>(
  id: number, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getPostsId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetPostsIdKey(id) : null);
  const swrFn = () => getPostsId(id, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Update a post
 */
export const patchPostsId = (
    id: number,
    patchPostsIdBody: PatchPostsIdBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.patch(
      `/posts/${id}`,
      patchPostsIdBody,options
    );
  }



export const getPatchPostsIdMutationFetcher = (id: number, options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: PatchPostsIdBody }): Promise<AxiosResponse<void>> => {
    return patchPostsId(id, arg, options);
  }
}
export const getPatchPostsIdMutationKey = (id: number,) => [`/posts/${id}`] as const;

export type PatchPostsIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchPostsId>>>
export type PatchPostsIdMutationError = AxiosError<void>

/**
 * @summary Update a post
 */
export const usePatchPostsId = <TError = AxiosError<void>>(
  id: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof patchPostsId>>, TError, Key, PatchPostsIdBody, Awaited<ReturnType<typeof patchPostsId>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPatchPostsIdMutationKey(id);
  const swrFn = getPatchPostsIdMutationFetcher(id, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
