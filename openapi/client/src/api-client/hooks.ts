/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * OpenAPI demo
 * OpenAPI spec version: 1.0
 */
import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import useSwr from 'swr';
import type {
  Key,
  SWRConfiguration
} from 'swr';

import useSWRMutation from 'swr/mutation';
import type {
  SWRMutationConfiguration
} from 'swr/mutation';

import type {
  CreatePostDto,
  GetPostsParams,
  PostDto,
  PostsConnectionDto,
  UpdatePostBody
} from './model';

export const appControllerGetHello = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.get(
      `/`,options
    );
  }



export const getAppControllerGetHelloKey = () => [`/`] as const;

export type AppControllerGetHelloQueryResult = NonNullable<Awaited<ReturnType<typeof appControllerGetHello>>>
export type AppControllerGetHelloQueryError = AxiosError<unknown>

export const useAppControllerGetHello = <TError = AxiosError<unknown>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof appControllerGetHello>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getAppControllerGetHelloKey() : null);
  const swrFn = () => appControllerGetHello(axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Create a post
 */
export const createPost = (
    createPostDto: CreatePostDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostDto>> => {
    return axios.post(
      `/posts`,
      createPostDto,options
    );
  }



export const getCreatePostMutationFetcher = ( options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: CreatePostDto }): Promise<AxiosResponse<PostDto>> => {
    return createPost(arg, options);
  }
}
export const getCreatePostMutationKey = () => [`/posts`] as const;

export type CreatePostMutationResult = NonNullable<Awaited<ReturnType<typeof createPost>>>
export type CreatePostMutationError = AxiosError<unknown>

/**
 * @summary Create a post
 */
export const useCreatePost = <TError = AxiosError<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createPost>>, TError, Key, CreatePostDto, Awaited<ReturnType<typeof createPost>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreatePostMutationKey();
  const swrFn = getCreatePostMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Get all posts
 */
export const getPosts = (
    params?: GetPostsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostsConnectionDto>> => {
    return axios.get(
      `/posts`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetPostsKey = (params?: GetPostsParams,) => [`/posts`, ...(params ? [params]: [])] as const;

export type GetPostsQueryResult = NonNullable<Awaited<ReturnType<typeof getPosts>>>
export type GetPostsQueryError = AxiosError<unknown>

/**
 * @summary Get all posts
 */
export const useGetPosts = <TError = AxiosError<unknown>>(
  params?: GetPostsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getPosts>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetPostsKey(params) : null);
  const swrFn = () => getPosts(params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Get a post by id
 */
export const getPostById = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostDto>> => {
    return axios.get(
      `/posts/${id}`,options
    );
  }



export const getGetPostByIdKey = (id: number,) => [`/posts/${id}`] as const;

export type GetPostByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPostById>>>
export type GetPostByIdQueryError = AxiosError<void>

/**
 * @summary Get a post by id
 */
export const useGetPostById = <TError = AxiosError<void>>(
  id: number, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getPostById>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetPostByIdKey(id) : null);
  const swrFn = () => getPostById(id, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Update a post
 */
export const updatePost = (
    id: number,
    updatePostBody: UpdatePostBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostDto>> => {
    return axios.patch(
      `/posts/${id}`,
      updatePostBody,options
    );
  }



export const getUpdatePostMutationFetcher = (id: number, options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: UpdatePostBody }): Promise<AxiosResponse<PostDto>> => {
    return updatePost(id, arg, options);
  }
}
export const getUpdatePostMutationKey = (id: number,) => [`/posts/${id}`] as const;

export type UpdatePostMutationResult = NonNullable<Awaited<ReturnType<typeof updatePost>>>
export type UpdatePostMutationError = AxiosError<void>

/**
 * @summary Update a post
 */
export const useUpdatePost = <TError = AxiosError<void>>(
  id: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof updatePost>>, TError, Key, UpdatePostBody, Awaited<ReturnType<typeof updatePost>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUpdatePostMutationKey(id);
  const swrFn = getUpdatePostMutationFetcher(id, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
